// Generated by CoffeeScript 1.10.0
(function() {
  var jule;

  jule = {
    boardWidth: 30,
    boardHeight: 30,
    boardSpacing: 20,
    gameInterval: 300
  };

  jule.initGame = function() {
    jule.initBoard();
    jule.getCanvas();
    window.requestAnimationFrame(jule.executeSequence);
    return jule.runGameInterval();
  };

  jule.initBoard = function() {
    var col, i, j, line, ref, ref1;
    jule.board = [];
    for (line = i = 0, ref = jule.boardHeight; 0 <= ref ? i <= ref : i >= ref; line = 0 <= ref ? ++i : --i) {
      jule.board.push([]);
      for (col = j = 0, ref1 = jule.boardWidth; 0 <= ref1 ? j <= ref1 : j >= ref1; col = 0 <= ref1 ? ++j : --j) {
        jule.board[line].push(null);
      }
    }
    jule.players = [];
    return jule.players.push({
      id: 0,
      name: 'GonÃ§alo',
      score: 0,
      orientation: 'right',
      position: [10, 10],
      lastPosition: null,
      color: 'red'
    });
  };

  jule.runGameInterval = function() {
    return window.setInterval(function() {
      return jule.updateGame();
    }, jule.gameInterval);
  };

  jule.detectCollision = function(pos, dir) {
    switch (dir) {
      case 'up':
        if (jule.board[pos[1] - 1][pos[0]] !== null) {
          return true;
        }
        break;
      case 'down':
        if (jule.board[pos[1] + 1][pos[0]] !== null) {
          return true;
        }
        break;
      case 'left':
        if (jule.board[pos[1]][pos[0] - 1] !== null) {
          return true;
        }
        break;
      case 'right':
        if (jule.board[pos[1]][pos[0] + 1] !== null) {
          return true;
        }
    }
  };

  jule.playerLost = function(player) {
    var col, colIndex, i, j, len, len1, line, lineIndex, ref;
    player.lost = true;
    ref = jule.board;
    for (lineIndex = i = 0, len = ref.length; i < len; lineIndex = ++i) {
      line = ref[lineIndex];
      for (colIndex = j = 0, len1 = line.length; j < len1; colIndex = ++j) {
        col = line[colIndex];
        if (col === player.id) {
          jule.board[lineIndex][colIndex] = null;
        }
      }
    }
    return jule.initBoard();
  };

  jule.updatePlayer = function(player) {
    if (player.lost) {
      return;
    }
    switch (player.orientation) {
      case 'up':
        jule.board[player.position[1] - 1][player.position[0]] = player.id;
        player.position[1]--;
        break;
      case 'down':
        jule.board[player.position[1] + 1][player.position[0]] = player.id;
        player.position[1]++;
        break;
      case 'left':
        jule.board[player.position[1]][player.position[0] - 1] = player.id;
        player.position[0]--;
        break;
      case 'right':
        jule.board[player.position[1]][player.position[0] + 1] = player.id;
        player.position[0]++;
    }
    return player.lastOrientation = player.orientation;
  };

  jule.updateGame = function() {
    var i, len, player, ref, results;
    ref = jule.players;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      player = ref[i];
      if (jule.detectCollision(player.position, player.orientation)) {
        jule.playerLost(player);
      }
      results.push(jule.updatePlayer(player));
    }
    return results;
  };

  jule.getCanvas = function() {
    jule.canvas = document.getElementById('jule');
    if (jule.canvas.getContext) {
      jule.ctx = jule.canvas.getContext('2d');
      return jule.bindCanvas();
    } else {
      return location.href = 'http://www.disney.com';
    }
  };

  jule.playerMove = function(player, dir) {
    if (!player) {
      player = jule.players[0];
    }
    if (player.lastOrientation === dir) {
      return;
    }
    if (player.lastOrientation === 'up' && dir === 'down') {
      return;
    }
    if (player.lastOrientation === 'left' && dir === 'right') {
      return;
    }
    if (player.lastOrientation === 'down' && dir === 'up') {
      return;
    }
    if (player.lastOrientation === 'right' && dir === 'left') {
      return;
    }
    return player.orientation = dir;
  };

  jule.bindCanvas = function() {
    document.addEventListener('keydown', function(e) {
      if (e.keyCode === 87 || e.keyCode === 38) {
        jule.playerMove(false, 'up');
      }
      if (e.keyCode === 83 || e.keyCode === 40) {
        jule.playerMove(false, 'down');
      }
      if (e.keyCode === 65 || e.keyCode === 37) {
        jule.playerMove(false, 'left');
      }
      if (e.keyCode === 68 || e.keyCode === 39) {
        return jule.playerMove(false, 'right');
      }
    }, true);
  };

  jule.getPlayerById = function(id) {
    var i, len, player, ref;
    ref = jule.players;
    for (i = 0, len = ref.length; i < len; i++) {
      player = ref[i];
      if (id === player.id) {
        player;
      }
    }
    return null;
  };

  jule.executeSequence = function() {
    var col, colIndex, ctx, i, j, k, l, len, len1, ref, ref1, ref2, row, rowIndex;
    ctx = jule.ctx;
    ctx.clearRect(0, 0, jule.canvas.width, jule.canvas.height);
    for (colIndex = i = 0, ref = jule.boardWidth; 0 <= ref ? i <= ref : i >= ref; colIndex = 0 <= ref ? ++i : --i) {
      ctx.beginPath();
      ctx.moveTo(colIndex * jule.boardSpacing, 0);
      ctx.lineTo(colIndex * jule.boardSpacing, jule.boardHeight * jule.boardSpacing);
      ctx.stroke();
    }
    for (rowIndex = j = 0, ref1 = jule.boardHeight; 0 <= ref1 ? j <= ref1 : j >= ref1; rowIndex = 0 <= ref1 ? ++j : --j) {
      ctx.beginPath();
      ctx.moveTo(0, rowIndex * jule.boardSpacing);
      ctx.lineTo(jule.boardWidth * jule.boardSpacing, rowIndex * jule.boardSpacing);
      ctx.stroke();
    }
    ref2 = jule.board;
    for (rowIndex = k = 0, len = ref2.length; k < len; rowIndex = ++k) {
      row = ref2[rowIndex];
      for (colIndex = l = 0, len1 = row.length; l < len1; colIndex = ++l) {
        col = row[colIndex];
        if (col !== null) {
          ctx.fillRect(colIndex * jule.boardSpacing, rowIndex * jule.boardSpacing, jule.boardSpacing, jule.boardSpacing);
        }
      }
    }
    return window.requestAnimationFrame(jule.executeSequence);
  };

  jule.initGame();

}).call(this);

//# sourceMappingURL=jule.js.map
